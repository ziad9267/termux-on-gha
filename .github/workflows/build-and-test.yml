name: 'Termux libs' # empty name
#on: [push, pull_request]
on:
  push:
  pull_request:
  workflow_dispatch:
    #inputs:
      #packages:
        #description: Type the command you want to run.
        #required: true
        #type: string

jobs:
  # This is what is currently necessary to make termux-docker work with GHA.
  working:
    strategy:
      matrix:
        include:
          #- runner: ubuntu-24.04
            #architecture: i686
          #- runner: ubuntu-24.04
            #architecture: x86_64
          #- runner: ubuntu-24.04-arm
            #architecture: arm
          - runner: ubuntu-24.04-arm
            architecture: aarch64
    runs-on: ${{ matrix.runner }}
    # prepare writable volume prefix mount for actions/upload-artifact,
    # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
    # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
    container:
      image: termux/termux-docker:${{ matrix.architecture }}
      volumes: 
        - /tmp/node20:/__e/node20
    # approximate environment variables for actions that can't be forced to use entrypoint.sh
    env:
      TERMUX_MAIN_PACKAGE_FORMAT: debian
      ANDROID_ROOT: /system
      ANDROID_DATA: /data
      PREFIX: /data/data/com.termux/files/usr
      HOME: /data/data/com.termux/files/home
      PATH: /data/data/com.termux/files/usr/bin
      TMPDIR: /data/data/com.termux/files/usr/tmp
      LANG: en_US.UTF-8
      TZ: UTC
    steps:
      - name: set pkg command to use the packages-cf.termux.dev mirror
        run: ln -sf ${PREFIX}/etc/termux/mirrors/default ${PREFIX}/etc/termux/chosen_mirrors
      - name: upgrade all packages to prepare for installing nodejs
        run: /entrypoint.sh bash -c "yes | pkg upgrade -y"
      # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
      # executable bit actually set for all users, since even though that permissions restriction
      # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
      # source code doesn't "care" and would refuse to run the binary anyway.
      # relevant internal source code of GitHub Actions:
      # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
      - name: fix executable bit for all binaries in $PREFIX/bin for all users
        run: chmod -R o+x ${PREFIX}/bin
      - name: install bionic-libc nodejs to force compatibility with actions/checkout and actions/upload-artifact
        run: |
          /entrypoint.sh pkg install -y nodejs-lts
          ln -sf ${PREFIX}/bin /__e/node20/bin
      - uses: actions/checkout@v4.2.2
      - name: fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000)
        run: chown -R 1000:1000 .
      - name: setup
        run: |
          # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
          # the entrypoint.
          /entrypoint.sh pkg install -y ninja python git
          /entrypoint.sh pip install meson
          #/entrypoint.sh ${{ inputs.packages }}
          /entrypoint.sh pkg install -y tur-repo x11-repo
          /entrypoint.sh pkg install -y clang pkg-config alsa-lib pulseaudio fontconfig freetype gnutls mesa libx11 libxcursor libxfixes libxi libxrandr libxrender libxext vulkan-loader gstreamer gst-plugins-base sdl2 gst-plugins-good xorgproto
          /entrypoint.sh pkg install -y fontconfig freetype krb5 libandroid-spawn libc++ libgmp libgnutls libxcb libxcomposite libxcursor libxfixes libxrender opengl pulseaudio sdl2 vulkan-loader xorg-xrandr
      #- name: build
        #run: touch artifact
      - name: Compressing Termux files
        run: tar cf termuxfs.tar /data/data/com.termux/files/usr
      - uses: actions/upload-artifact@v4.6.0
        with:
          name: artifact-${{ matrix.architecture }}
          path: ./termuxfs.tar

      - name: "Create Release"
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v2
        with:
         name: "termuxfs"
         tag_name: "test"
         prerelease: false
         files: |
          ./termuxfs.tar

  # This is the ideal way termux-docker would work with GHA.
  broken-ideal:
    if: false
    runs-on: ubuntu-latest
    container: termux/termux-docker:x86_64
    steps:
      - name: setup
        run: |
          pkg install -y ninja python git
          pip install meson
      - uses: actions/checkout@v3.3.0
      - name: build
        run: touch artifact
      - uses: actions/upload-artifact@v3.1.2
        if: always()
        with:
          name: artifact
          path: artifact

